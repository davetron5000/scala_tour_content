h1. 

"Abstract Types":http://www.scala-lang.org/node/105 attempts to explain the feature of the same name.  This is not about abstract classes.

h1. My Interpretation

There are two uses for this construct.  The first, which is more commonly used, is to alias types.  The second is to provide an alternative way of parameterizing some of the types of your class

h2. Type Aliasing

TBD 

h2. Type Parameterization

The concept is that instead of

pre. class BaseClass[T]

you can do 

pre. class BaseClass {
  type T
}

and override it thusly:

pre. class SubClass extends BaseClass {
  type T = String // or any other class specifier
}

So, this is useful when you are designing a class that should have a parameterized type, but where you do not want that type necessarily exposed to callers of the class.

I have yet to come up with a straightforward example of this.

h1. My Thoughts on this Feature

This may require a lot more depth into Scala before I can come up with a comprehensible example that *also* makes it clear how a generics-based implementation doesn't work.  I could certainly demonstrate it, as others have, but the first question is "why not use generics?"
