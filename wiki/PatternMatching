Scala's @match@ keyword is akin to Java's @switch@ statement, however it is *far* more powerful.

To get the flavor of the syntax, here's how you might translate the only true values in computer programming into English:

<script src="http://gist.github.com/154841.js"></script>

Note that @case _@ is the "default" case.  In Scala, the underscore (_) is frequently used as a wildcard/placeholder.

Java could do this pretty easily, however Java is limited to primitive types and enumerations.  In Scala, you can use pretty much anything.  Suppose you wish to translate English words lie "some", "one" and "none" int UML-type quantifiers.  In Java, you would need either an enumeration or a large @if-then-else@ statement.  In Scala, we can use @match@:

<script src="http://gist.github.com/154842.js"></script>

This, alone, is pretty useful.  However, we can make this even more dynamic.  Suppose we want our function to also translate numbers into exact amounts (e.g. @approximate(34)@ yields @34@) and we want to handle booleans, where a @true@ is @1@ and a @false@ is @0..1@.  This would be some ugly Java code.

<script src="http://gist.github.com/154843.js"></script>

Scala's @match@ and @case@ statements take care of all the casting.  Yes, this is type safe code!

This construct is quite powerful.  CaseClasses shows another way to use it to keep your code clean and clear.



