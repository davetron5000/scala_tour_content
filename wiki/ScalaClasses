h1. The Gist

"Classes":http://www.scala-lang.org/node/132 and "Subclasses":http://www.scala-lang.org/node/125 give an overview of how to define a simple class in Scala and how to extend it using OO-style inheritance.

h1. My Interpretation

Classes are defined much as they are in Java.  Here is a simple class that models a circle.

<script src="http://gist.github.com/151005.js"></script>

This is quite different from Java; it's much more compact, but it also gives you a tiny flavor of the functional side of Scala.  Notice how all the method definitions use the equals sign?  You are creating a sort-of expression for each one, but it's evaluated when you call the method.

You can also extend classes much as with Java.  Note that when we indicate the class we're extending, we can pass up constructor values.  Also note that superclass methods are called with the @super@ keyword, just as in Java.  And yes, I realize this is a horrible example of Object-Oriented design.

<script src="http://gist.github.com/151029.js"></script>

This isn't a comprehensive overview of **everything** you can do, but gives you some of the flavor of classes in Scala.

h1. My Thoughts on this Feature

Pretty simple.  The constructor stuff is great, and the variable/property thing is really nice, too.  
