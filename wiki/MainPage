h1. Why

I find the "tour of scala":http://www.scala-lang.org/node/104 a nice idea, but very difficult to follow for a few reasons:

* The level of the tour elements skips from extremely basic to beyond advanced without a good guide through.  This has left me scratching my head at some of the more advanced concepts.
* Many of the features are demonstrated via mathematical conecpts or completely arbitrary calculations (how often do I need to take a list and arbitrarily modulo its contents into a new list?)
* Some features are demonstrated by setting up a convoluted problem that the feature magically solves, leaving me wondering why the feature even exists, when a simpler design for the problem at hand would have obviated the need for it.
* The more advanced topics are described in very terse format and difficult to understand without what I assume is a deep understanding of Scala already or some other functional programming language.

So, I'm going through each thing and trying to:

* Order them sensibly, so previous topics support future ones
* Create more real-world situations where a feature might be useful (I make you this promise: The word "monoid" will never be used again in these pages)
* Comment on my own thoughts as to the utility of the feature.

I'm also a Java programmer by trade, so a lot of the "justification" aspects that come to me are in comparison to Java.  

h1. The Tour

* Basics
** UnifiedTypes
** ScalaBasics
** ScalaClasses
** ScalaTraits
** ScalaGenerics
* Intermediate
** ScalaFunctions
** PatternMatching
** FunctionCurrying - define a function that has received some of its parameters now, and will get the remainder later.
** CaseClasses - taking switch statements to a useful level.
** XmlLiterals
** ForComprehensions - don't let the name confuse you; this is about Scala's powerful @for@ loop construct
** TypeBounds
** InnerClasses - you only thought they were basic.
** ImplicitConversions
* Advanced
** TypeVariance
** AbstractTypes - *not* abstract classes
** ExplcitlyTypedSelfReferences

h2. TODO

I haven't looked at this and they are not all covered by the above (though some may be)

* "Annotations":http://www.scala-lang.org/node/106
* "Predefined Function classOf":http://www.scala-lang.org/node/109
* "Extractor Objects":http://www.scala-lang.org/node/112
* "Implicit Parameters":http://www.scala-lang.org/node/114
* "Type-dependent Closures":http://www.scala-lang.org/node/138
* "Operators":http://www.scala-lang.org/node/118
* "Higher Order Functions":http://www.scala-lang.org/node/134
* "Packages":http://www.scala-lang.org/node/119
* "Sealed Classes":http://www.scala-lang.org/node/123
* "Local type inference":http://www.scala-lang.org/node/127
* "Views":http://www.scala-lang.org/node/130
