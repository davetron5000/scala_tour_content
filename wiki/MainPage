This is my own "re-telling" of the "tour of Scala":http://www.scala-lang.org/node/104 from the official Scala website.  If you are wondering [w:WhyAnotherTour], it's mostly because it was fun and informative.  I hope you feel the same way.

You should be able to go through these in the order listed, with each building on previous topics.  I've also linked to the original tour topics as well as added my own where I thought it might help.

h2. Basics

# [w:ScalaBasics] - this covers some syntactic things that might surprise you, as well as some very basic things about working with Scala (not in the tour)
# [w:UnifiedTypes] - everything is an object
# [w:ScalaClasses] - Scala is object-oriented
# [w:ScalaProperties] - Scala intelligently handles so-called "getters" and "setters"
# [w:ScalaPackages] - Scala allows code to be packaged for visibility and organization
# [w:ScalaObject] - Scala has direct support for singletons
# [w:ScalaTraits] - Scala allows multiple inheritance via mixins.
# [w:ScalaGenerics] - Scala allows parameterized types
# [w:ScalaAnnotations] - Scala can use Java annotations
# [w:ScalaOperators] - Scala's flexible syntax lets you create your own operators.
# [w:JavaIntegration] - Scala can call anything that Java can.

h2. Intermediate

# [w:ScalaFunctions] - Scala has strong support for functional programming
# [w:PatternMatching] - Scala has an advanced @switch@/@case@ system
# [w:FunctionCurrying] - define a function that has received some of its parameters now, and will get the remainder later.
# [w:CaseClasses] - taking switch statements to a useful level.
# [w:SealedClasses] - tightening up [w:CaseClasses].
# [w:XmlLiterals] - Scala allows XML literals that are smarter than strings.
# [w:ForComprehensions] - don't let the name confuse you; this is about Scala's powerful @for@ loop construct
# [w:TypeBounds] - Scala's generic types can be restricted and bound (just as in Java)
# [w:InnerClasses] - Scala supports nesting classes within objects and other classes.
# [w:ImplicitConversions] - Scala can implicitly convert objects to other types.
# [w:TypeDependentClosures] - Closures in general discussed here, too.

h2. Advanced

# [w:ImplicitParameters] - Scala can automatically pass parameters to methods that need them!
# [w:TypeVariance] - Scala supports more advanced generics/type parameterization via covariance and contra-variance.
# [w:AbstractTypes] - Scala supports type aliasing and abstract types as an alternative to generics/type parameterization.
# [w:AdvancedScalaObjects] - Scala's singleton objects are quite powerful.
# [w:DuckTyping] - Scala supports duck typing.  Take that, Ruby!
# [w:ActorsAndConcurrency] - Scala uses an actor/message-passing style of concurrency
# [w:ExplcitlyTypedSelfReferences] - This is like the final boss in Super Mario 3.  Good luck.
